// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library schema.common;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


///  Schema types for routing and streaming
///  Used by the collector to determine how to process incoming data
enum SchemaType {
  UNKNOWN(0),
  EVENT(1),
  LOG(2),
  METRIC(3),
  INVENTORY(4);

  final int value;
  const SchemaType(this.value);

  factory SchemaType.fromValue(int value) {
    switch (value) {
      case 0: return SchemaType.UNKNOWN;
      case 1: return SchemaType.EVENT;
      case 2: return SchemaType.LOG;
      case 3: return SchemaType.METRIC;
      case 4: return SchemaType.INVENTORY;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static SchemaType? _createOrNull(int? value) =>
      value == null ? null : SchemaType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 4;
  static const fb.Reader<SchemaType> reader = _SchemaTypeReader();
}

class _SchemaTypeReader extends fb.Reader<SchemaType> {
  const _SchemaTypeReader();

  @override
  int get size => 1;

  @override
  SchemaType read(fb.BufferContext bc, int offset) =>
      SchemaType.fromValue(const fb.Uint8Reader().read(bc, offset));
}

///  Standard batch structure for all data types
///  This is the top-level container that wraps all schema-specific data
///  Field IDs ensure forward compatibility and allow optimal field ordering
class Batch {
  Batch._(this._bc, this._bcOffset);
  factory Batch(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Batch> reader = _BatchReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<int>? get apiKey => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 4);
  int get batchId => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 6, 0);
  SchemaType get schemaType => SchemaType.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 8, 0));
  List<int>? get data => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Batch{apiKey: ${apiKey}, batchId: ${batchId}, schemaType: ${schemaType}, data: ${data}}';
  }

  BatchT unpack() => BatchT(
      apiKey: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 4),
      batchId: batchId,
      schemaType: schemaType,
      data: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 10));

  static int pack(fb.Builder fbBuilder, BatchT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

///  Standard batch structure for all data types
///  This is the top-level container that wraps all schema-specific data
///  Field IDs ensure forward compatibility and allow optimal field ordering
class BatchT implements fb.Packable {
  List<int>? apiKey;
  int batchId;
  SchemaType schemaType;
  List<int>? data;

  BatchT({
      this.apiKey,
      this.batchId = 0,
      this.schemaType = SchemaType.UNKNOWN,
      this.data});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? apiKeyOffset = apiKey == null ? null
        : fbBuilder.writeListUint8(apiKey!);
    final int? dataOffset = data == null ? null
        : fbBuilder.writeListUint8(data!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, apiKeyOffset);
    fbBuilder.addUint64(1, batchId);
    fbBuilder.addUint8(2, schemaType.value);
    fbBuilder.addOffset(3, dataOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'BatchT{apiKey: ${apiKey}, batchId: ${batchId}, schemaType: ${schemaType}, data: ${data}}';
  }
}

class _BatchReader extends fb.TableReader<Batch> {
  const _BatchReader();

  @override
  Batch createObject(fb.BufferContext bc, int offset) => 
    Batch._(bc, offset);
}

class BatchBuilder {
  BatchBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addApiKeyOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }
  int addBatchId(int? batchId) {
    fbBuilder.addUint64(1, batchId);
    return fbBuilder.offset;
  }
  int addSchemaType(SchemaType? schemaType) {
    fbBuilder.addUint8(2, schemaType?.value);
    return fbBuilder.offset;
  }
  int addDataOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class BatchObjectBuilder extends fb.ObjectBuilder {
  final List<int>? _apiKey;
  final int? _batchId;
  final SchemaType? _schemaType;
  final List<int>? _data;

  BatchObjectBuilder({
    List<int>? apiKey,
    int? batchId,
    SchemaType? schemaType,
    List<int>? data,
  })
      : _apiKey = apiKey,
        _batchId = batchId,
        _schemaType = schemaType,
        _data = data;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? apiKeyOffset = _apiKey == null ? null
        : fbBuilder.writeListUint8(_apiKey!);
    final int? dataOffset = _data == null ? null
        : fbBuilder.writeListUint8(_data!);
    fbBuilder.startTable(4);
    fbBuilder.addOffset(0, apiKeyOffset);
    fbBuilder.addUint64(1, _batchId);
    fbBuilder.addUint8(2, _schemaType?.value);
    fbBuilder.addOffset(3, dataOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
