// automatically generated by the FlatBuffers compiler, do not modify
// ignore_for_file: unused_import, unused_field, unused_element, unused_local_variable, constant_identifier_names

library schema.event;

import 'dart:typed_data' show Uint8List;
import 'package:flat_buffers/flat_buffers.dart' as fb;


import './common_schema.common_generated.dart' as schema_common;

///  Event types for different processing paths
///  Optimized to uint8 for memory efficiency (was uint32)
///  Determines downstream processing and storage routing
enum EventType {
  UNKNOWN(0),
  TRACK(1),
  IDENTIFY(2),
  GROUP(3),
  ALIAS(4),
  ENRICH(5);

  final int value;
  const EventType(this.value);

  factory EventType.fromValue(int value) {
    switch (value) {
      case 0: return EventType.UNKNOWN;
      case 1: return EventType.TRACK;
      case 2: return EventType.IDENTIFY;
      case 3: return EventType.GROUP;
      case 4: return EventType.ALIAS;
      case 5: return EventType.ENRICH;
      default: throw StateError('Invalid value $value for bit flag enum');
    }
  }

  static EventType? _createOrNull(int? value) =>
      value == null ? null : EventType.fromValue(value);

  static const int minValue = 0;
  static const int maxValue = 5;
  static const fb.Reader<EventType> reader = _EventTypeReader();
}

class _EventTypeReader extends fb.Reader<EventType> {
  const _EventTypeReader();

  @override
  int get size => 1;

  @override
  EventType read(fb.BufferContext bc, int offset) =>
      EventType.fromValue(const fb.Uint8Reader().read(bc, offset));
}

///  Single event in the CDP system
///  Field IDs allow optimal memory layout and forward compatibility
///  Note: session_id (context_id) and message_id can be included in payload
///  if needed - testing through SDKs to determine if top-level fields are required
class Event {
  Event._(this._bc, this._bcOffset);
  factory Event(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<Event> reader = _EventReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  int get timestamp => const fb.Uint64Reader().vTableGet(_bc, _bcOffset, 4, 0);
  EventType get eventType => EventType.fromValue(const fb.Uint8Reader().vTableGet(_bc, _bcOffset, 6, 0));
  List<int>? get userId => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 8);
  List<int>? get payload => const fb.Uint8ListReader().vTableGetNullable(_bc, _bcOffset, 10);

  @override
  String toString() {
    return 'Event{timestamp: ${timestamp}, eventType: ${eventType}, userId: ${userId}, payload: ${payload}}';
  }

  EventT unpack() => EventT(
      timestamp: timestamp,
      eventType: eventType,
      userId: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 8),
      payload: const fb.Uint8ListReader(lazy: false).vTableGetNullable(_bc, _bcOffset, 10));

  static int pack(fb.Builder fbBuilder, EventT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

///  Single event in the CDP system
///  Field IDs allow optimal memory layout and forward compatibility
///  Note: session_id (context_id) and message_id can be included in payload
///  if needed - testing through SDKs to determine if top-level fields are required
class EventT implements fb.Packable {
  int timestamp;
  EventType eventType;
  List<int>? userId;
  List<int>? payload;

  EventT({
      this.timestamp = 0,
      this.eventType = EventType.UNKNOWN,
      this.userId,
      this.payload});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? userIdOffset = userId == null ? null
        : fbBuilder.writeListUint8(userId!);
    final int? payloadOffset = payload == null ? null
        : fbBuilder.writeListUint8(payload!);
    fbBuilder.startTable(4);
    fbBuilder.addUint64(0, timestamp);
    fbBuilder.addUint8(1, eventType.value);
    fbBuilder.addOffset(2, userIdOffset);
    fbBuilder.addOffset(3, payloadOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'EventT{timestamp: ${timestamp}, eventType: ${eventType}, userId: ${userId}, payload: ${payload}}';
  }
}

class _EventReader extends fb.TableReader<Event> {
  const _EventReader();

  @override
  Event createObject(fb.BufferContext bc, int offset) => 
    Event._(bc, offset);
}

class EventBuilder {
  EventBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(4);
  }

  int addTimestamp(int? timestamp) {
    fbBuilder.addUint64(0, timestamp);
    return fbBuilder.offset;
  }
  int addEventType(EventType? eventType) {
    fbBuilder.addUint8(1, eventType?.value);
    return fbBuilder.offset;
  }
  int addUserIdOffset(int? offset) {
    fbBuilder.addOffset(2, offset);
    return fbBuilder.offset;
  }
  int addPayloadOffset(int? offset) {
    fbBuilder.addOffset(3, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EventObjectBuilder extends fb.ObjectBuilder {
  final int? _timestamp;
  final EventType? _eventType;
  final List<int>? _userId;
  final List<int>? _payload;

  EventObjectBuilder({
    int? timestamp,
    EventType? eventType,
    List<int>? userId,
    List<int>? payload,
  })
      : _timestamp = timestamp,
        _eventType = eventType,
        _userId = userId,
        _payload = payload;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? userIdOffset = _userId == null ? null
        : fbBuilder.writeListUint8(_userId!);
    final int? payloadOffset = _payload == null ? null
        : fbBuilder.writeListUint8(_payload!);
    fbBuilder.startTable(4);
    fbBuilder.addUint64(0, _timestamp);
    fbBuilder.addUint8(1, _eventType?.value);
    fbBuilder.addOffset(2, userIdOffset);
    fbBuilder.addOffset(3, payloadOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
///  Event data container (goes in Batch.data)
///  Contains batched events for efficient network transport
class EventData {
  EventData._(this._bc, this._bcOffset);
  factory EventData(List<int> bytes) {
    final rootRef = fb.BufferContext.fromBytes(bytes);
    return reader.read(rootRef, 0);
  }

  static const fb.Reader<EventData> reader = _EventDataReader();

  final fb.BufferContext _bc;
  final int _bcOffset;

  List<Event>? get events => const fb.ListReader<Event>(Event.reader).vTableGetNullable(_bc, _bcOffset, 4);

  @override
  String toString() {
    return 'EventData{events: ${events}}';
  }

  EventDataT unpack() => EventDataT(
      events: events?.map((e) => e.unpack()).toList());

  static int pack(fb.Builder fbBuilder, EventDataT? object) {
    if (object == null) return 0;
    return object.pack(fbBuilder);
  }
}

///  Event data container (goes in Batch.data)
///  Contains batched events for efficient network transport
class EventDataT implements fb.Packable {
  List<EventT>? events;

  EventDataT({
      this.events});

  @override
  int pack(fb.Builder fbBuilder) {
    final int? eventsOffset = events == null ? null
        : fbBuilder.writeList(events!.map((b) => b.pack(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, eventsOffset);
    return fbBuilder.endTable();
  }

  @override
  String toString() {
    return 'EventDataT{events: ${events}}';
  }
}

class _EventDataReader extends fb.TableReader<EventData> {
  const _EventDataReader();

  @override
  EventData createObject(fb.BufferContext bc, int offset) => 
    EventData._(bc, offset);
}

class EventDataBuilder {
  EventDataBuilder(this.fbBuilder);

  final fb.Builder fbBuilder;

  void begin() {
    fbBuilder.startTable(1);
  }

  int addEventsOffset(int? offset) {
    fbBuilder.addOffset(0, offset);
    return fbBuilder.offset;
  }

  int finish() {
    return fbBuilder.endTable();
  }
}

class EventDataObjectBuilder extends fb.ObjectBuilder {
  final List<EventObjectBuilder>? _events;

  EventDataObjectBuilder({
    List<EventObjectBuilder>? events,
  })
      : _events = events;

  /// Finish building, and store into the [fbBuilder].
  @override
  int finish(fb.Builder fbBuilder) {
    final int? eventsOffset = _events == null ? null
        : fbBuilder.writeList(_events!.map((b) => b.getOrCreateOffset(fbBuilder)).toList());
    fbBuilder.startTable(1);
    fbBuilder.addOffset(0, eventsOffset);
    return fbBuilder.endTable();
  }

  /// Convenience method to serialize to byte list.
  @override
  Uint8List toBytes([String? fileIdentifier]) {
    final fbBuilder = fb.Builder(deduplicateTables: false);
    fbBuilder.finish(finish(fbBuilder), fileIdentifier);
    return fbBuilder.buffer;
  }
}
